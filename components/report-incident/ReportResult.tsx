import React, { useRef, useState } from 'react';
import { IncidentReport, IncidentData } from '../../hooks/useIncidentReporter';
import DownloadIcon from '../icons/DownloadIcon';
import RotateCwIcon from '../icons/RotateCwIcon';
import Feedback from '../Feedback';
import ExternalLinkIcon from '../icons/ExternalLinkIcon';
import { getISODate, getFormattedDate } from '../../utils/dateUtils';
import { exportTextFile, exportElementAsPDF } from '../../utils/exportUtils';
import { formatMarkdown } from '../../utils/markdownParser';
import SpinnerIcon from '../icons/SpinnerIcon';
import FilePdfIcon from '../icons/FilePdfIcon';
import { useTextToSpeech } from '../../hooks/useTextToSpeech';
import SpeakerIcon from '../icons/SpeakerIcon';
import StopCircleIcon from '../icons/StopCircleIcon';
import PauseIcon from '../icons/PauseIcon';
import { cleanReportForSpeech } from '../../utils/stringUtils';

interface ReportResultProps {
    response: IncidentReport;
    originalData: IncidentData;
    onStartOver: () => void;
}

const ReportResult: React.FC<ReportResultProps> = ({ response, originalData, onStartOver }) => {
    const reportRef = useRef<HTMLDivElement>(null);
    const [isExportingPdf, setIsExportingPdf] = useState(false);
    const { isSpeaking, isPaused, speak, cancel, pause, resume } = useTextToSpeech();

    const generateReportText = () => {
        let text = `INCIDENT REPORT\n`;
        text += `========================================\n\n`;
        text += `Date & Time: ${originalData.dateTime}\n`;
        text += `Location: ${originalData.location}\n`;
        text += `Parties Involved: ${originalData.involvedParties}\n`;
        text += `Jurisdiction: ${originalData.jurisdiction}\n\n`;
        text += `----------------------------------------\n`;
        text += `PROFESSIONAL SUMMARY\n`;
        text += `----------------------------------------\n`;
        text += `${response.professionalSummary}\n\n`;
        text += `----------------------------------------\n`;
        text += `OBSERVED IMPACT\n`;
        text += `----------------------------------------\n`;
        response.observedImpact.forEach(item => {
            text += `- ${item}\n`;
        });
        text += `\n`;
        text += `----------------------------------------\n`;
        text += `LEGAL INSIGHTS & STRATEGY (FOR INFORMATIONAL PURPOSES)\n`;
        text += `----------------------------------------\n`;
        response.legalInsights.forEach(item => {
            text += `- Insight: ${item.insight}\n`;
            text += `  Legislation: ${item.legislation}\n`;
            text += `  Source: ${item.sourceUrl}\n\n`;
        });
        text += `\n\n========================================\n`;
        text += `Original Narrative (for reference):\n${originalData.narrative}\n\n`;
        text += `**Disclaimer: This is an AI-generated report and does not constitute legal advice. It is for informational purposes only.**\n`;
        return text;
    };

    const handleExport = () => {
        const reportText = generateReportText();
        const date = getISODate();
        const filename = `CustodyBuddy-Incident-Report-${date}.txt`;
        exportTextFile(reportText, filename);
    };

    const handleExportPdf = async () => {
        if (!reportRef.current) return;
        
        setIsExportingPdf(true);
        try {
            const isoDate = getISODate();
            const friendlyDate = getFormattedDate();
            const filename = `CustodyBuddy-Incident-Report-${isoDate}.pdf`;
            const headerText = `Incident Report - Generated by CustodyBuddy.com on ${friendlyDate}`;
            await exportElementAsPDF(reportRef.current, filename, headerText);
        } catch (error) {
            console.error("Failed to export PDF:", error);
            alert("Sorry, there was an issue creating the PDF. Please try again.");
        } finally {
            setIsExportingPdf(false);
        }
    };

    const handlePlayPause = () => {
        if (!isSpeaking) {
            const plainText = cleanReportForSpeech(response);
            speak(plainText);
        } else if (isPaused) {
            resume();
        } else {
            pause();
        }
    };

    const handleStop = () => {
        cancel();
    };

    return (
        <div className="space-y-6 animate-fade-in">
            <div className="flex flex-col gap-4 md:flex-row md:justify-between items-start md:items-center">
                <h3 className="text-xl font-bold text-amber-400 flex-shrink-0">Generated Incident Report</h3>
                <div className="flex flex-wrap items-center justify-start gap-2">
                    <button
                        onClick={onStartOver}
                        className="flex items-center gap-2 text-sm text-amber-400 hover:text-amber-300 font-semibold transition-colors"
                    >
                        <RotateCwIcon className="w-4 h-4" />
                        New Report
                    </button>
                    <div className="h-6 w-px bg-slate-700 mx-1 hidden sm:block"></div>
                     <button
                        onClick={handlePlayPause}
                        className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all"
                        aria-label={!isSpeaking ? "Read report aloud" : isPaused ? "Resume reading report" : "Pause reading report"}
                    >
                        {!isSpeaking || isPaused ? <SpeakerIcon className="w-4 h-4" /> : <PauseIcon className="w-4 h-4" />}
                        <span>{!isSpeaking ? 'Read Aloud' : isPaused ? 'Resume' : 'Pause'}</span>
                    </button>
                    {isSpeaking && (
                         <button
                            onClick={handleStop}
                            className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all"
                            aria-label="Stop reading report"
                        >
                            <StopCircleIcon className="w-4 h-4" />
                            <span>Stop</span>
                        </button>
                    )}
                    <button
                        onClick={handleExport}
                        className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all"
                        aria-label="Export report as a text file"
                    >
                        <DownloadIcon className="w-4 h-4" />
                        <span>Export TXT</span>
                    </button>
                     <button
                        onClick={handleExportPdf}
                        disabled={isExportingPdf}
                        className="flex items-center gap-2 bg-slate-700 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg transition-all disabled:opacity-70 disabled:cursor-wait"
                        aria-label={isExportingPdf ? "Creating PDF, please wait" : "Export report as a PDF file"}
                    >
                        {isExportingPdf ? (
                            <>
                                <SpinnerIcon className="w-4 h-4" />
                                <span>Creating...</span>
                            </>
                        ) : (
                            <>
                                <FilePdfIcon className="w-4 h-4" />
                                <span>Export PDF</span>
                            </>
                        )}
                    </button>
                </div>
            </div>

            <div className="bg-slate-900 border border-slate-700 rounded-lg">
                <div ref={reportRef} className="p-6">
                    <div className="mb-6 hidden print:block">
                        <h3 className="text-2xl font-bold text-amber-400">Incident Report</h3>
                        <p className="text-sm text-gray-400">Generated by CustodyBuddy.com on {getFormattedDate()}</p>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-2 text-sm mb-6 border-b border-slate-700 pb-4">
                        <div><strong className="font-semibold text-gray-300">Date & Time:</strong> <span className="text-gray-400">{originalData.dateTime || 'N/A'}</span></div>
                        <div><strong className="font-semibold text-gray-300">Location:</strong> <span className="text-gray-400">{originalData.location || 'N/A'}</span></div>
                        <div><strong className="font-semibold text-gray-300">Parties Involved:</strong> <span className="text-gray-400">{originalData.involvedParties || 'N/A'}</span></div>
                        <div><strong className="font-semibold text-gray-300">Jurisdiction:</strong> <span className="text-gray-400">{originalData.jurisdiction || 'N/A'}</span></div>
                    </div>

                    <div className="space-y-6">
                        <section>
                            <h4 className="font-bold text-lg text-gray-200 mb-2">Professional Summary</h4>
                            <div
                                className="text-gray-300 leading-relaxed prose prose-invert prose-p:my-2 prose-ul:my-2 prose-strong:text-amber-400 max-w-none"
                                dangerouslySetInnerHTML={{ __html: formatMarkdown(response.professionalSummary) }}
                            />
                        </section>
                        <section>
                            <h4 className="font-bold text-lg text-gray-200 mb-2">Observed Impact</h4>
                            <ul className="list-disc pl-5 space-y-1 text-gray-300">
                                {response.observedImpact.map((item, i) => <li key={i}>{item}</li>)}
                            </ul>
                        </section>
                        <section>
                            <h4 className="font-bold text-lg text-gray-200 mb-2">Legal Insights &amp; Strategy</h4>
                            <div className="space-y-4">
                                {response.legalInsights.map((item, i) => (
                                    <div key={i} className="p-3 bg-slate-800 rounded-md border border-slate-700">
                                        <p className="text-gray-300">{item.insight}</p>
                                        <div className="mt-2 text-xs">
                                            <span className="font-semibold text-gray-400">Relevant Legislation: </span>
                                            <a 
                                                href={item.sourceUrl} 
                                                target="_blank" 
                                                rel="noopener noreferrer"
                                                className="text-amber-400 hover:text-amber-300 hover:underline inline-flex items-center gap-1"
                                            >
                                                {item.legislation}
                                                <ExternalLinkIcon />
                                                <span className="sr-only">(opens in new tab)</span>
                                            </a>
                                        </div>
                                    </div>
                                ))}
                            </div>
                            <p className="text-xs text-gray-500 mt-3">*For informational purposes only. Not legal advice. Verify sources independently.</p>
                        </section>
                        <section className="pt-6 border-t border-slate-700">
                             <h4 className="font-bold text-lg text-gray-200 mb-2">Original Narrative (for reference)</h4>
                             <div className="p-3 bg-slate-800 rounded-md border border-slate-700">
                                <p className="text-gray-400 whitespace-pre-wrap font-mono text-sm">{originalData.narrative || 'No narrative provided.'}</p>
                             </div>
                        </section>
                    </div>
                </div>

                <div className="border-t border-slate-800 no-pdf">
                    <Feedback />
                </div>
            </div>
        </div>
    );
};

export default ReportResult;